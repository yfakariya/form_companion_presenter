# This file is based upon pedantic_mono v1.20
# https://github.com/mono0926/pedantic_mono/blob/main/lib/analysis_options.yaml
# (MIT License)
analyzer:
  exclude: ["**/codegen_loader.g.dart"]
  strong-mode:
    implicit-dynamic: false
  errors:
    missing_required_param: warning
    missing_return: warning
  language:
    strict-casts: true
    strict-inference: true
    strict-raw-types: true
linter:
  rules:
    - always_declare_return_types
    - always_put_control_body_on_new_line
    - avoid_bool_literals_in_conditional_expressions
    # If needed, it should be explicitly disabled in the source.
    - avoid_catches_without_on_clauses
    # If needed, it should be explicitly disabled in the source.
    - avoid_catching_errors
    - avoid_classes_with_only_static_members
    - avoid_double_and_int_checks
    - avoid_dynamic_calls
    - avoid_equals_and_hash_code_on_mutable_classes # effective dart
    - avoid_field_initializers_in_const_classes
    - avoid_final_parameters
    - avoid_implementing_value_types
    - avoid_js_rounded_ints
    - avoid_multiple_declarations_per_line
    - avoid_positional_boolean_parameters
    # - avoid_private_typedef_functions # important for readability
    - avoid_print # often forget to remove debugging printf
    - avoid_redundant_argument_values
    - avoid_returning_null
    # Not work as documented: https://dart-lang.github.io/linter/lints/avoid_returning_null_for_future.html
    - avoid_returning_null_for_future
    - avoid_returning_this
    - avoid_setters_without_getters
    - avoid_slow_async_io
    - avoid_type_to_string
    - avoid_types_on_closure_parameters # effective dart
    - avoid_unused_constructor_parameters
    - avoid_void_async
    - cancel_subscriptions
    - cascade_invocations
    - cast_nullable_to_non_nullable
    - close_sinks
    # - combinators_ordering # Released in Dart 2.19
    - comment_references
    - depend_on_referenced_packages
    - deprecated_consistency
    - directives_ordering
    - discarded_futures
    # If needed, it should be explicitly disabled in the source.
    - do_not_use_environment
    - eol_at_end_of_file
    - flutter_style_todos
    - join_return_with_assignment
    # - lines_longer_than_80_chars # meaning-less
    - literal_only_boolean_expressions
    - no_adjacent_strings_in_list
    - no_default_cases
    - no_leading_underscores_for_library_prefixes
    - no_leading_underscores_for_local_identifiers
    - noop_primitive_operations
    - null_check_on_nullable_type_parameter
    - omit_local_variable_types
    - one_member_abstracts
    - only_throw_errors
    - package_api_docs
    - parameter_assignments
    - prefer_asserts_in_initializer_lists
    - prefer_constructors_over_static_methods
    - prefer_final_in_for_each
    - prefer_final_locals
    - prefer_foreach
    - prefer_int_literals
    - prefer_interpolation_to_compose_strings
    - prefer_mixin # effective dart
    - prefer_relative_imports # pedantic
    - prefer_single_quotes
    - public_member_api_docs # effective dart
    - require_trailing_commas
    - secure_pubspec_urls
    - sized_box_shrink_expand
    - sort_child_properties_last
    # - sort_constructors_first
    - sort_pub_dependencies
    - sort_unnamed_constructors_first
    - test_types_in_equals
    - throw_in_finally
    - tighten_type_of_initializing_formals
    - type_annotate_public_apis
    - unawaited_futures
    - unnecessary_await_in_return
    # - unnecessary_constructor_name
    - unnecessary_lambdas
    - unnecessary_late
    - unnecessary_null_aware_assignments
    - unnecessary_null_aware_operator_on_extension_on_nullable
    - unnecessary_null_checks
    - unnecessary_nullable_for_final_variable_declarations
    - unnecessary_parenthesis
    - unnecessary_statements
    - unnecessary_to_list_in_spreads
    - unsafe_html
    - use_build_context_synchronously
    - use_colored_box
    - use_decorated_box
    - use_enums
    - use_if_null_to_convert_nulls_to_bools
    - use_is_even_rather_than_modulo
    - use_late_for_private_fields_and_variables
    - use_named_constants
    - use_setters_to_change_properties
    - use_string_buffers
    # - use_string_in_part_of_directives # Released in Dart 2.19
    # - use_super_parameters # this is still buggy in flutter_lint 2.0.1
    - use_test_throws_matchers
    - use_to_and_as_if_applicable
